{
  "branches": [
    "master"
  ],
  "writerOpts": {
    "transform": "customTransform = (commit, context) => {\n  const issues = [];\n\n  commit.notes.forEach(note => {\n    note.title = `BREAKING CHANGES`;\n  });\n\n  if (commit.type === `feat`) {\n    commit.type = `Features`;\n  } else if (commit.type === `fix`) {\n    commit.type = `Bug Fixes`;\n  } else if (commit.type === `perf`) {\n    commit.type = `Performance Improvements`;\n  } else if (commit.type === `revert`) {\n    commit.type = `Reverts`;\n  } else if (commit.type === `docs`) {\n    commit.type = `Documentation`;\n  } else if (commit.type === `style`) {\n    commit.type = `Styles`;\n  } else if (commit.type === `refactor`) {\n    commit.type = `Code Refactoring`;\n  } else if (commit.type === `test`) {\n    commit.type = `Tests`;\n  } else if (commit.type === `build`) {\n    commit.type = `Build System`;\n  } else if (commit.type === `ci`) {\n    commit.type = `Continuous Integration`;\n  } else {\n    return;\n  }\n\n  if (commit.scope === `*`) {\n    commit.scope = ``;\n  }\n\n  if (typeof commit.hash === `string`) {\n    commit.shortHash = commit.hash.substring(0, 7);\n  }\n\n  if (typeof commit.subject === `string`) {\n    let url = context.repository\n      ? `${context.host}/${context.owner}/${context.repository}`\n      : context.repoUrl;\n    if (url) {\n      url = `${url}/issues/`;\n      // Issue URLs.\n      commit.subject = commit.subject.replace(/#([0-9]+)/g, (_, issue) => {\n        issues.push(issue);\n        return `[#${issue}](${url}${issue})`;\n      });\n    }\n    if (context.host) {\n      // User URLs.\n      commit.subject = commit.subject.replace(\n        /\\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/g,\n        (_, username) => {\n          if (username.includes(\"/\")) {\n            return `@${username}`;\n          }\n\n          return `[@${username}](${context.host}/${username})`;\n        }\n      );\n    }\n  }\n\n  // remove references that already appear in the subject\n  commit.references = commit.references.filter(reference => {\n    if (issues.indexOf(reference.issue) === -1) {\n      return true;\n    }\n\n    return false;\n  });\n\n  return commit;\n};"
  },
  "plugins": [
    [
      "@semantic-release/commit-analyzer",
      {
        "preset": "angular",
        "releaseRules": [
          {
            "type": "feat",
            "release": "minor"
          },
          {
            "type": "fix",
            "release": "patch"
          },
          {
            "type": "perf",
            "release": "patch"
          }
        ],
        "parserOpts": {
          "noteKeywords": [
            "BREAKING CHANGE",
            "BREAKING CHANGES",
            "BREAKING"
          ]
        }
      }
    ],
    [
      "@semantic-release/release-notes-generator",
      {
        "preset": "angular",
        "parserOpts": {
          "noteKeywords": [
            "BREAKING CHANGE",
            "BREAKING CHANGES",
            "BREAKING"
          ]
        },
        "writerOpts": {
          "title": "this_is_the_title",
          "host": "https://github.com",
          "commitsSort": [
            "subject",
            "scope"
          ],
          "owner": "C0ZEN",
          "repoUrl": "https://github.com/C0ZEN/semantic-release-poc",
          "linkReferences": true,
          "commit": "commits",
          "issue": "issues",
          "includeDetails": false,
          "ignoreReverted": false,
          "transform": "customTransform = (commit, context) => {\n  const issues = [];\n\n  commit.notes.forEach(note => {\n    note.title = `BREAKING CHANGES`;\n  });\n\n  if (commit.type === `feat`) {\n    commit.type = `Features`;\n  } else if (commit.type === `fix`) {\n    commit.type = `Bug Fixes`;\n  } else if (commit.type === `perf`) {\n    commit.type = `Performance Improvements`;\n  } else if (commit.type === `revert`) {\n    commit.type = `Reverts`;\n  } else if (commit.type === `docs`) {\n    commit.type = `Documentation`;\n  } else if (commit.type === `style`) {\n    commit.type = `Styles`;\n  } else if (commit.type === `refactor`) {\n    commit.type = `Code Refactoring`;\n  } else if (commit.type === `test`) {\n    commit.type = `Tests`;\n  } else if (commit.type === `build`) {\n    commit.type = `Build System`;\n  } else if (commit.type === `ci`) {\n    commit.type = `Continuous Integration`;\n  } else {\n    return;\n  }\n\n  if (commit.scope === `*`) {\n    commit.scope = ``;\n  }\n\n  if (typeof commit.hash === `string`) {\n    commit.shortHash = commit.hash.substring(0, 7);\n  }\n\n  if (typeof commit.subject === `string`) {\n    let url = context.repository\n      ? `${context.host}/${context.owner}/${context.repository}`\n      : context.repoUrl;\n    if (url) {\n      url = `${url}/issues/`;\n      // Issue URLs.\n      commit.subject = commit.subject.replace(/#([0-9]+)/g, (_, issue) => {\n        issues.push(issue);\n        return `[#${issue}](${url}${issue})`;\n      });\n    }\n    if (context.host) {\n      // User URLs.\n      commit.subject = commit.subject.replace(\n        /\\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/g,\n        (_, username) => {\n          if (username.includes(\"/\")) {\n            return `@${username}`;\n          }\n\n          return `[@${username}](${context.host}/${username})`;\n        }\n      );\n    }\n  }\n\n  // remove references that already appear in the subject\n  commit.references = commit.references.filter(reference => {\n    if (issues.indexOf(reference.issue) === -1) {\n      return true;\n    }\n\n    return false;\n  });\n\n  return commit;\n};"
        },
        "linkCompare": true,
        "linkReferences": true,
        "commit": "commit",
        "issue": "issues"
      }
    ],
    [
      "@semantic-release/changelog",
      {
        "changelogFile": "CHANGELOG.md",
        "changelogTitle": "# Semantic Versioning Changelog"
      }
    ],
    [
      "@semantic-release/git",
      {
        "assets": [
          "package.json",
          "package-lock.json",
          "CHANGELOG.md"
        ],
        "message": "build(release): new version ${nextRelease.version}"
      }
    ],
    [
      "@semantic-release/github"
    ]
  ],
  "dryRun": false,
  "ci": true,
  "preset": "angular",
  "debug": true,
  "tagFormat": "${version}"
}
